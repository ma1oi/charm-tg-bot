generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  tuid     BigInt @unique
  username String
  name     String
  role     Role   @default(customer)
  createdAt     DateTime      @default(now())

  ordersAsCustomer Order[]          @relation("CustomerOrders")
  ordersAsArtist   Order[]          @relation("ArtistOrders")
  messages         Message[]
  payments         Payment[]
  promoUsages      PromocodeUsage[]
  ArtistQueue      ArtistQueue?
  Artist           Artist?
  ArtistCategory   ArtistCategory[]
}

model Artist {
  id     Int    @id @default(autoincrement())
  name   String @unique
  userId Int    @unique

  user User @relation(fields: [userId], references: [id])
}

model CategoryProdict {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  imgUrl      String
}

model ArtistCategory {
  id       Int    @id @default(autoincrement())
  name     String
  category String
  userId   Int
  imgUrl   String

  User User? @relation(fields: [userId], references: [id])
}

model ArtistQueue {
  id        Int      @id @default(autoincrement())
  artistId  Int      @unique
  createdAt DateTime @default(now())

  artist User @relation(fields: [artistId], references: [id])
}

model Order {
  id           Int         @id @default(autoincrement())
  customerId   Int
  customerTuid BigInt
  artistId     Int?
  status       OrderStatus @default(not_paid)
  skinFileUrl  String?
  description  String?
  createdAt    DateTime    @default(now())
  completedAt  DateTime?
  promocode    String?
  nameProduct  String

  customer    User             @relation("CustomerOrders", fields: [customerId], references: [id])
  artist      User?            @relation("ArtistOrders", fields: [artistId], references: [id])
  messages    Message[]
  payments    Payment[]
  promoUsages PromocodeUsage[]
}

model Message {
  id        Int      @id @default(autoincrement())
  orderId   Int
  senderId  Int
  content   String?
  fileUrl   String?
  createdAt DateTime @default(now())

  order    Order @relation(fields: [orderId], references: [id])
  sender   User  @relation(fields: [senderId], references: [id])
  artistId Int?
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  customerId    Int
  amount        Float
  paymentId     String
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  order    Order @relation(fields: [orderId], references: [id])
  customer User  @relation(fields: [customerId], references: [id])
  artistId Int?
}

model Promocode {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  discountType  DiscountType
  discountValue Float
  expiresAt     DateTime?
  maxUses       Int
  usedCount     Int          @default(0)
  createdAt     DateTime      @default(now())

  usages PromocodeUsage[]
}

model PromocodeUsage {
  id          Int      @id @default(autoincrement())
  promocodeId Int
  userId      Int
  orderId     Int
  usedAt      DateTime @default(now())
  createdAt     DateTime      @default(now())

  promocode Promocode @relation(fields: [promocodeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  order     Order     @relation(fields: [orderId], references: [id])
}

enum Role {
  customer
  artist
  admin
}

enum OrderStatus {
  not_paid
  pending
  in_progress
  done
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum DiscountType {
  percent
  fixed
}
